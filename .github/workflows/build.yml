name: Build Binaries

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use_cross: false
            binary_name: trojan-rs
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            use_cross: true
            binary_name: trojan-rs
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            use_cross: true
            binary_name: trojan-rs
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            use_cross: true
            binary_name: trojan-rs
          - target: x86_64-apple-darwin
            os: macos-latest
            use_cross: false
            binary_name: trojan-rs
          - target: aarch64-apple-darwin
            os: macos-latest
            use_cross: false
            binary_name: trojan-rs

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies
        if: matrix.use_cross == true
        run: |
          sudo apt-get update
          case "${{ matrix.target }}" in
            "aarch64-unknown-linux-gnu")
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
            "aarch64-unknown-linux-musl")
              sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
              ;;
            "x86_64-unknown-linux-musl")
              sudo apt-get install -y musl-tools
              ;;
          esac

      - name: Install cross-compilation tool
        if: matrix.use_cross == true
        run: |
          cargo install cross

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary (using cross)
        if: matrix.use_cross == true
        run: cross build --release --target ${{ matrix.target }}

      - name: Build binary (native)
        if: matrix.use_cross == false
        run: cargo build --release --target ${{ matrix.target }}

      - name: Verify binary exists
        run: |
          if [ -f "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" ] || [ -f "target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe" ]; then
            echo "Binary found."
            ls -la target/${{ matrix.target }}/release/

            if [ -f "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" ]; then
              file "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" || true
            else
              file "target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe" || true
            fi

            if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
              echo "Testing binary execution..."
              "./target/${{ matrix.target }}/release/${{ matrix.binary_name }}" --help || echo "Binary test failed, but file exists"
            fi
          else
            echo "Binary not found!"
            ls -la target/${{ matrix.target }}/release/ || echo "Release directory missing"
            exit 1
          fi

      - name: Prepare binary (Unix)
        if: "!contains(matrix.os, 'windows')"
        run: |
          mkdir -p artifacts
          if [ -f "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" ]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "artifacts/${{ matrix.binary_name }}"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}.exe" "artifacts/${{ matrix.binary_name }}.exe"
          fi

          if command -v strip &> /dev/null; then
            strip artifacts/${{ matrix.binary_name }}* || echo "Strip failed, continuing..."
          fi

          cd artifacts
          tar -czf ${{ github.event.repository.name }}-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}*
          ls -la
          rm -f ${{ matrix.binary_name }}*
          cd ..

      - name: Verify artifacts before upload
        run: |
          echo "Checking for artifacts to upload..."
          ls -la artifacts/ || echo "artifacts directory not found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.target }}
          path: artifacts/*
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip" | sort

      - name: Flatten artifacts
        run: |
          mkdir -p release-artifacts
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-artifacts/ \;
          ls -la release-artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-artifacts/*
          draft: true
          generate_release_notes: true
