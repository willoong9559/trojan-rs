name: Rust CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    name: Build (${{ matrix.os }} - ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
          # Linux ARM64 (cross compile)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # ARM64 交叉编译的依赖安装
      - name: Install cross-compilation tools for ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      # 创建 cargo 配置目录
      - name: Create cargo config directory
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: mkdir -p .cargo
      
      # 配置 ARM64 链接器
      - name: Configure ARM64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cat > .cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build in release mode
        run: cargo build --release --target ${{ matrix.target }} --verbose
      
      - name: Run tests (only on native builds)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-apple-darwin'
        run: cargo test --verbose --target ${{ matrix.target }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-build-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/trojan-rs
            target/${{ matrix.target }}/release/trojan-rs.exe
          if-no-files-found: warn
